name: Sync STUDYLOG to Wiki (FE/BE sections)

on:
  workflow_dispatch:
  push:
    branches: [ "**" ]
    paths:
      - "STUDYLOG/**"
  pull_request:
    branches: [ "**" ]
    paths:
      - "STUDYLOG/**"

permissions:
  contents: write
  pull-requests: read

jobs:
  sync-wiki:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed study logs
        id: diff
        shell: bash
        run: |
          set -e
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          if [ -z "$BEFORE" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            git ls-files -z 'STUDYLOG/**/*.md' > changed.zlist || true
          else
            git diff --name-only -z "$BEFORE" "$AFTER" -- 'STUDYLOG/**/*.md' > changed.zlist || true
          fi
          tr '\0' '\n' < changed.zlist | tee changed.txt

      - name: Collect metadata
        id: meta
        shell: bash
        run: |
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "short=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
          echo "commit_url=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_OUTPUT
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          else
            echo "pr_url=" >> $GITHUB_OUTPUT
          fi

      - name: Clone your Wiki (.wiki.git)
        shell: bash
        run: |
          set -e
          WIKI_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/eeeunhey/ResumeProject.wiki.git"
          git clone "$WIKI_URL" _wiki || (mkdir -p _wiki && cd _wiki && git init && git remote add origin "$WIKI_URL")
          mkdir -p "_wiki/STUDYLOG"

      - name: Copy changed files & inject metadata (bash only)
        shell: bash
        env:
          BRANCH: ${{ steps.meta.outputs.branch }}
          SHORT: ${{ steps.meta.outputs.short }}
          COMMIT_URL: ${{ steps.meta.outputs.commit_url }}
          PR_URL: ${{ steps.meta.outputs.pr_url }}
        run: |
          set -euo pipefail

          # 초기 채움: diff가 없으면 전체 스캔
          if [ ! -s changed.zlist ]; then
            echo "No diff found, syncing all md files"
            find STUDYLOG -type f -name "*.md" -print0 > changed.zlist || true
          fi

          while IFS= read -r -d '' FILE; do
            [ -z "$FILE" ] && continue
            BASENAME="$(basename "$FILE")"
            DEST="_wiki/STUDYLOG/$BASENAME"

            CONTENT="$(cat "$FILE")"
            CONTENT="${CONTENT//\{\{BRANCH_NAME\}\}/$BRANCH}"
            CONTENT="${CONTENT//\{\{COMMIT_SHORT\}\}/$SHORT}"
            CONTENT="${CONTENT//\{\{COMMIT_URL\}\}/$COMMIT_URL}"
            CONTENT="${CONTENT//\{\{PR_URL\}\}/$PR_URL}"
            CONTENT="${CONTENT//\{\{REL_PATH\}\}/$FILE}"

            printf "%s\n" "$CONTENT" > "$DEST"
            echo "[ok] synced: $DEST"
          done < changed.zlist

      - name: Rebuild Wiki Home (FE/BE/Misc) with safe links
        shell: bash
        run: |
          set -euo pipefail

          # URL 인코딩 도구
          sudo apt-get update -y
          sudo apt-get install -y jq

          INDEX="_wiki/Home.md"
          INDEX_FE="$(mktemp)"
          INDEX_BE="$(mktemp)"
          INDEX_MISC="$(mktemp)"

          export TZ=Asia/Seoul
          NOW="$(date '+%Y-%m-%d %H:%M %Z')"

          mapfile -t FILES < <(find "_wiki/STUDYLOG" -maxdepth 1 -type f -name "*.md" -printf "%f\n" | sort -r)

          urlencode () { jq -sRr @uri; }

          for F in "${FILES[@]}"; do
            TITLE="${F%.md}"                              # 표시용 제목
            URL_ENC="$(printf "%s" "$TITLE" | urlencode)" # 링크용 경로(대괄호/공백 안전)

            LINE="- [${TITLE}](STUDYLOG/${URL_ENC})"

            if [[ "$F" == \[FE\]* ]]; then
              echo "$LINE" >> "$INDEX_FE"
            elif [[ "$F" == \[BE\]* ]]; then
              echo "$LINE" >> "$INDEX_BE"
            else
              echo "$LINE" >> "$INDEX_MISC"
            fi
          done

          {
            echo "# 📚 스터디 로그 (자동 인덱스)"
            echo
            echo "> 최신 업데이트: $NOW"
            echo
            if [ -s "$INDEX_FE" ]; then
              echo "## 🖥️ Frontend"
              cat "$INDEX_FE"; echo
            fi
            if [ -s "$INDEX_BE" ]; then
              echo "## ⚙️ Backend"
              cat "$INDEX_BE"; echo
            fi
            if [ -s "$INDEX_MISC" ]; then
              echo "## 📦 기타/공통"
              cat "$INDEX_MISC"; echo
            fi
          } > "$INDEX"

      - name: Commit & push to Wiki
        shell: bash
        run: |
          set -e
          cd _wiki
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No wiki changes to commit."
            exit 0
          fi
          MSG="docs(wiki): sync from ${GITHUB_REF_NAME} @ ${GITHUB_SHA:0:7}"
          git commit -m "$MSG"
          git push origin HEAD
