name: Sync STUDYLOG to Wiki (FE/BE, clean links)

on:
  workflow_dispatch:
  push:
    branches: ["**"]
    paths:
      - "STUDYLOG/**"
  pull_request:
    branches: ["**"]
    paths:
      - "STUDYLOG/**"

permissions:
  contents: write
  pull-requests: read

jobs:
  sync-wiki:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed study logs
        id: diff
        shell: bash
        run: |
          set -e
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          if [ -z "$BEFORE" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            git ls-files -z 'STUDYLOG/**/*.md' > changed.zlist || true
          else
            git diff --name-only -z "$BEFORE" "$AFTER" -- 'STUDYLOG/**/*.md' > changed.zlist || true
          fi
          tr '\0' '\n' < changed.zlist | tee changed.txt

      - name: Collect metadata
        id: meta
        shell: bash
        run: |
          echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "short=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
          echo "commit_url=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_OUTPUT
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          else
            echo "pr_url=" >> $GITHUB_OUTPUT
          fi

      - name: Clone Wiki (.wiki.git)
        shell: bash
        run: |
          set -e
          WIKI_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/eeeunhey/ResumeProject.wiki.git"
          git clone "$WIKI_URL" _wiki || (mkdir -p _wiki && cd _wiki && git init && git remote add origin "$WIKI_URL")
          mkdir -p "_wiki/FE" "_wiki/BE"

      - name: Copy → sanitize filename → inject metadata (bash only)
        shell: bash
        env:
          BRANCH: ${{ steps.meta.outputs.branch }}
          SHORT:  ${{ steps.meta.outputs.short }}
          COMMIT_URL: ${{ steps.meta.outputs.commit_url }}
          PR_URL: ${{ steps.meta.outputs.pr_url }}
        run: |
          set -euo pipefail
          export LANG=C.UTF-8
          export LC_ALL=C.UTF-8

          # 초기 채움: diff 없으면 전체 스캔
          if [ ! -s changed.zlist ]; then
            find STUDYLOG -type f -name "*.md" -print0 > changed.zlist || true
          fi

          # 위험 문자 제거/치환: 대괄호 삭제, 점→-, 공백→-, 비영숫자→-
          sanitize_core () {
            printf "%s" "$1" \
              | sed -E 's/[\[\]]//g; s/[.]/-/g; s/[[:space:]]+/-/g; s/[^[:alnum:]_-]/-/g; s/-+/-/g; s/^-//; s/-$//'
          }

          while IFS= read -r -d '' FILE; do
            [ -z "$FILE" ] && continue
            BASE="$(basename "$FILE" .md)"

            # 카테고리 판정 + 접두사 제거
            CAT=""
            CORE="$BASE"
            if [[ "$BASE" == \[FE\]* ]]; then
              CAT="FE"
              CORE="$(printf "%s" "$BASE" | sed -E 's/^\[(FE)\][[:space:]]*//')"
            elif [[ "$BASE" == \[BE\]* ]]; then
              CAT="BE"
              CORE="$(printf "%s" "$BASE" | sed -E 's/^\[(BE)\][[:space:]]*//')"
            else
              echo "[skip] no [FE]/[BE] prefix: $FILE"
              continue
            fi

            CORE_SAFE="$(sanitize_core "$CORE")"   # 파일명 슬러그
            DEST_DIR="_wiki/$CAT"
            DEST="$DEST_DIR/${CORE_SAFE}.md"
            mkdir -p "$DEST_DIR"

            CONTENT="$(cat "$FILE")"
            CONTENT="${CONTENT//\{\{BRANCH_NAME\}\}/$BRANCH}"
            CONTENT="${CONTENT//\{\{COMMIT_SHORT\}\}/$SHORT}"
            CONTENT="${CONTENT//\{\{COMMIT_URL\}\}/$COMMIT_URL}"
            CONTENT="${CONTENT//\{\{PR_URL\}\}/$PR_URL}"
            CONTENT="${CONTENT//\{\{REL_PATH\}\}/$FILE}"

            printf "%s\n" "$CONTENT" > "$DEST"
            echo "[ok] $FILE  →  $DEST"
          done < changed.zlist

      - name: Cleanup legacy root pages (once)
        shell: bash
        run: |
          set -euo pipefail
          cd _wiki
          # 예전 STUDYLOG 디렉토리/루트의 [FE]/[BE] 페이지 제거
          rm -rf STUDYLOG || true
          find . -maxdepth 1 -type f -name "[[]FE[]]*.md" -delete || true
          find . -maxdepth 1 -type f -name "[[]BE[]]*.md" -delete || true
          # FE/BE 안에 있는 것과 이름이 같은 루트 페이지가 있으면 삭제
          for f in FE/*.md; do bn="$(basename "$f")"; [ -f "$bn" ] && rm -f "$bn"; done
          for f in BE/*.md; do bn="$(basename "$f")"; [ -f "$bn" ] && rm -f "$bn"; done
          cd -

      - name: Rebuild Home (FE/BE — direct links, no misc)
        shell: bash
        run: |
          set -euo pipefail
          export LANG=C.UTF-8
          export LC_ALL=C.UTF-8

          INDEX="_wiki/Home.md"
          INDEX_FE="$(mktemp)"
          INDEX_BE="$(mktemp)"

          export TZ=Asia/Seoul
          NOW="$(date '+%Y-%m-%d %H:%M %Z')"

          # 제목: 문서의 첫 H1 사용, 없으면 파일명
          get_title () {
            local path="$1"
            local t
            t="$(grep -m1 -E '^# ' "$path" | sed -E 's/^# +//')"
            if [ -z "$t" ]; then
              t="$(basename "$path" .md)"
            fi
            printf "%s" "$t"
          }

          mapfile -t FES < <(find "_wiki/FE" -maxdepth 1 -type f -name "*.md" -printf "%f\n" | sort -r)
          mapfile -t BES < <(find "_wiki/BE" -maxdepth 1 -type f -name "*.md" -printf "%f\n" | sort -r)

          for F in "${FES[@]}"; do
            T="$(get_title "_wiki/FE/$F")"
            SLUG="${F%.md}"
            echo "- [${T}](FE/${SLUG})" >> "$INDEX_FE"     # 확장자 없이 링크
          done

          for F in "${BES[@]}"; do
            T="$(get_title "_wiki/BE/$F")"
            SLUG="${F%.md}"
            echo "- [${T}](BE/${SLUG})" >> "$INDEX_BE"     # 확장자 없이 링크
          done

          {
            echo "# 📚 스터디 로그 (자동 인덱스)"
            echo
            echo "> 최신 업데이트: $NOW"
            echo
            if [ -s "$INDEX_FE" ]; then
              echo "## 🖥️ Frontend"
              cat "$INDEX_FE"; echo
            fi
            if [ -s "$INDEX_BE" ]; then
              echo "## ⚙️ Backend"
              cat "$INDEX_BE"; echo
            fi
          } > "$INDEX"

      - name: Commit & push to Wiki
        shell: bash
        run: |
          set -e
          cd _wiki
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No wiki changes to commit."
            exit 0
          fi
          MSG="docs(wiki): sync from ${GITHUB_REF_NAME} @ ${GITHUB_SHA:0:7}"
          git commit -m "$MSG"
          git push origin HEAD
