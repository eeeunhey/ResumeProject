name: Sync STUDYLOG to Wiki (FE/BE sections)

on:
  workflow_dispatch: {}
  push:
    branches: ["**"]
    paths:
      - "STUDYLOG/**"
  pull_request:
    branches: ["**"]
    paths:
      - "STUDYLOG/**"

permissions:
  contents: write
  pull-requests: read

jobs:
  sync-wiki:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed study logs
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          if [ -z "${BEFORE}" ] || [ "${BEFORE}" = "0000000000000000000000000000000000000000" ]; then
            git ls-files -z 'STUDYLOG/**/*.md' > changed.zlist || true
          else
            git diff --name-only -z "${BEFORE}" "${AFTER}" -- 'STUDYLOG/**/*.md' > changed.zlist || true
          fi
          tr '\0' '\n' < changed.zlist | tee changed.txt
          echo "changed<<EOF" >> "$GITHUB_OUTPUT"
          cat changed.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Collect metadata
        id: meta
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "branch=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          echo "short=$(git rev-parse --short ${{ github.sha }})" >> "$GITHUB_OUTPUT"
          echo "commit_url=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> "$GITHUB_OUTPUT"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr_url=${{ github.event.pull_request.html_url }}" >> "$GITHUB_OUTPUT"
          else
            echo "pr_url=" >> "$GITHUB_OUTPUT"
          fi

      - name: Clone target Wiki (.wiki.git)
        shell: bash
        env:
          WIKI_PAT: ${{ secrets.WIKI_PAT }}               # ← 있으면 PAT 사용
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}           # ← 없으면 GITHUB_TOKEN 사용(같은 레포의 위키일 때만 유효)
        run: |
          set -euo pipefail
          if [ -n "${WIKI_PAT:-}" ]; then
            AUTH="${WIKI_PAT}"
          else
            AUTH="x-access-token:${GH_TOKEN}"
          fi
          # ⬇ 요청하신 위키 주소 고정
          WIKI_URL="https://${AUTH}@github.com/eeeunhey/ResumeProject.wiki.git"

          git clone "${WIKI_URL}" _wiki || (mkdir -p _wiki && cd _wiki && git init && git remote add origin "${WIKI_URL}")
          mkdir -p "_wiki/STUDYLOG"

      - name: Copy changed files & inject metadata (robust)
        shell: bash
        env:
          BRANCH: ${{ steps.meta.outputs.branch }}
          SHORT: ${{ steps.meta.outputs.short }}
          COMMIT_URL: ${{ steps.meta.outputs.commit_url }}
          PR_URL: ${{ steps.meta.outputs.pr_url }}
        run: |
          set -euo pipefail
          export LANG=C.UTF-8
          export LC_ALL=C.UTF-8
          mkdir -p "_wiki/STUDYLOG"

          # 초기 채움: changed.zlist가 비면 전체 스캔
          if [ ! -s changed.zlist ]; then
            echo "No diff found, syncing all md files"
            find STUDYLOG -type f -name "*.md" -print0 > changed.zlist || true
          fi

          python3 - <<'PY'
            import os, pathlib, shutil

            wiki_dir = pathlib.Path("_wiki/STUDYLOG")
            changed = pathlib.Path("changed.zlist")

            BRANCH = os.environ.get("BRANCH","")
            SHORT = os.environ.get("SHORT","")
            COMMIT_URL = os.environ.get("COMMIT_URL","")
            PR_URL = os.environ.get("PR_URL","")

          def inject(text: str, src: pathlib.Path) -> str:
              return (text
                  .replace("{{BRANCH_NAME}}", BRANCH)
                  .replace("{{COMMIT_SHORT}}", SHORT)
                  .replace("{{COMMIT_URL}}", COMMIT_URL)
                  .replace("{{PR_URL}}", PR_URL)
                  .replace("{{REL_PATH}}", str(src).replace("\\","/"))
              )

          if changed.exists():
              parts = changed.read_bytes().split(b"\x00")
              for raw in parts:
                  if not raw:
                      continue
                  src = pathlib.Path(raw.decode("utf-8", errors="ignore"))
                  if not src.exists():
                      print("[skip] not found:", src)
                      continue
                  dest = wiki_dir / src.name
                  try:
                      text = src.read_text(encoding="utf-8", errors="ignore")
                  except Exception as e:
                      print("[warn] read fail:", src, e)
                      text = ""
                  injected = inject(text, src)
                  if injected.strip() == "":
                      print("[fallback] copy raw:", src, "->", dest)
                      shutil.copyfile(src, dest)
                  else:
                      dest.write_text(injected, encoding="utf-8")
                      print("[ok] synced:", dest, len(injected), "bytes")
          PY

      - name: Rebuild Wiki Home (FE/BE/Misc)
        shell: bash
        run: |
          set -euo pipefail
          INDEX="_wiki/Home.md"
          INDEX_FE="$(mktemp)"
          INDEX_BE="$(mktemp)"
          INDEX_MISC="$(mktemp)"

          export TZ=Asia/Seoul
          NOW="$(date '+%Y-%m-%d %H:%M %Z')"

          mapfile -t FILES < <(find "_wiki/STUDYLOG" -maxdepth 1 -type f -name "*.md" -printf "%f\n" | sort -r)

          for F in "${FILES[@]}"; do
            TITLE="${F%.md}"
            if [[ "$F" == \[FE\]* ]]; then
              echo "- [[STUDYLOG/$TITLE]]" >> "$INDEX_FE"
            elif [[ "$F" == \[BE\]* ]]; then
              echo "- [[STUDYLOG/$TITLE]]" >> "$INDEX_BE"
            else
              echo "- [[STUDYLOG/$TITLE]]" >> "$INDEX_MISC"
            fi
          done

          {
            echo "# 📚 스터디 로그 (자동 인덱스)"
            echo
            echo "> 최신 업데이트: $NOW"
            echo
            if [ -s "$INDEX_FE" ]; then
              echo "## 🖥️ Frontend"
              cat "$INDEX_FE"; echo
            fi
            if [ -s "$INDEX_BE" ]; then
              echo "## ⚙️ Backend"
              cat "$INDEX_BE"; echo
            fi
            if [ -s "$INDEX_MISC" ]; then
              echo "## 📦 기타/공통"
              cat "$INDEX_MISC"; echo
            fi
          } > "$INDEX"

      - name: Commit & push to Wiki
        shell: bash
        run: |
          set -euo pipefail
          cd _wiki
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No wiki changes to commit."
            exit 0
          fi
          MSG="docs(wiki): sync from ${GITHUB_REF_NAME} @ ${GITHUB_SHA:0:7}"
          git commit -m "$MSG"
          git push origin HEAD
